/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Data;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JPanel;

/**
 *
 * @author diego
 */
public class Lienzo extends javax.swing.JPanel implements Runnable {

    /**
     * Creates new form lienzo
     */
    
    private int x = getWidth(); // Coordenada de origen en x
    private int y = getHeight();
    int contador = 1; // Contador de las vueltas que ha dado
    private Color color; // Variable para cambiar el color a la figura
    private int n =0;
    Thread hilo;
    
    
    private boolean tope=false;

    public Lienzo() {
        initComponents();
        hilo = new Thread(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 113, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void paint(Graphics g) {
        
        // Configuracion del rectangulo de fondo
        g.setColor(getBackground());
        
        /*
            Se dibujara el rectangulo en las coordenadas 0,0
            con un ancho del largo del JPanel
            y una altura del alto del JPanel
        */
        g.fillRect(0, 0, getWidth(), getHeight());
        
        //Cofiguracion de los otros rectangulos
        //g.setColor(Color.RED);
        //g.fillRect(0, 0, 20, 20);
        
        // Configuracion del circulo 
        g.setColor(color);
        
        /*
            Se dibujara el circulo en las coordenadas 0,0
            con un tamaÃ±o de 30 de ancho y 30 de altura
        */
            
            g.fillOval(x, y, 30, 30);
            
            
    }

    public void inicio(int n) {
        if(n ==1){
        //bajar
        this.n= n;
        this.x= getWidth()-30;
        
        }else if(n==2){
        this.n=n;
        this.y= getHeight()-30;
        }else if(n==3){
        this.n= n;
        this.x= getWidth()-30;
        }else if(n==4){
        this.n= n;
        }else if(n==5){
         this.n=n;
        this.x= getWidth()-30;
        this.y=getHeight()-30;
        }
        hilo = new Thread(this);
        hilo.start();
    }

    public void pausar() {
        hilo.suspend();
    }
    
    public void continuar() {
        hilo.resume();
    }
    
    @Override
    public void run() {
        
        try {
            // Ciclo while para que ejecute la animacion sin parar
            while (true) {
                if(x == 10 && y == 10) {
                    contador++; // Contador para cuando el circulo llegue a las coordenadas (10,10)
                }
                if(n==1){
                
                    tope=false;
        while (x >= 10) { // Mover hacia la izquierda
            Thread.sleep(90);
            x -= 10;
            repaint();
    }
                    
                   
                
                while (y <= getHeight() - 40) { // Mover hacia abajo
    Thread.sleep(90);
    y += 10;
    repaint();
    }
                this.color = Color.WHITE;
                repaint();
                tope=true;
                  //  System.out.println("valor de y antes"+y);
                x= getWidth();
                y=0;
                //System.out.println("valor de y despues"+y);
                SG.nInicio-=1;
                SG.nInventario+=1;
                    System.out.println(SG.nInventario);
                Interfaz.MostrarMessage();                
                JPanel jParent = SG.interfaz.getJpanelInventario();
                JPanel container = SG.interfaz.getJInventario();
                SG.interfaz.AddMaterias(SG.nInventario, jParent, container, Color.BLUE);
                SG.interfaz.ActualizarDatos();
                
                SG.interfaz.InventarioAProduccion();
                break;
                
                
                }else if(n==2){
                    tope=false;
                    SG.nInventario-=1;
                SG.nProduccion+=1;
                
                    System.out.println(SG.nInventario);
                Interfaz.MostrarMessage();                
                
                //se elimina la anterior pelota
                JPanel jParent = SG.interfaz.getJpanelInventario();
                JPanel container = SG.interfaz.getJInventario();
                SG.interfaz.AddMaterias(SG.nInventario, jParent, container, Color.BLUE);
                
                
                    
                while (y > 10) {
                    Thread.sleep(90); // Velocidad con la que mueve el circulo
                    y -= 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                this.color = Color.WHITE;
                repaint();
                tope=true;
                y=getHeight()-30;
                x=0;
                
                //se crea nueva pelota
                JPanel jParent2 = SG.interfaz.getJpanelProduccion();
                JPanel container2 = SG.interfaz.getJProdunccionContenedor();
                SG.interfaz.AddMaterias(SG.nProduccion, jParent2, container2, Color.GREEN);
                SG.interfaz.ActualizarDatos();
                
                SG.interfaz.ProduccionAEmapaquetado();
                    break;
                    
                }else if(n==3){
                    tope=false;
                    SG.nProduccion-=1;
                SG.nEmpaquetado+=1;
                
                    System.out.println(SG.nProduccion);
                Interfaz.MostrarMessage();                
                
                //se elimina la anterior pelota
                
                JPanel jParent = SG.interfaz.getJpanelProduccion();
                JPanel container = SG.interfaz.getJProdunccionContenedor();
                SG.interfaz.AddMaterias(SG.nProduccion, jParent, container, Color.GREEN);
                
                
                    
                        while (x >= 10) { // Mover hacia la izquierda
            Thread.sleep(100);
            x -= 10;
            repaint();
    }
                        this.color = Color.WHITE;
                repaint();
                tope=true;
                        x= getWidth()-30;
                        y=0;
                        
                        
                        
                
                //Se crea la nueva pelota
                JPanel jParent2 = SG.interfaz.getJpanelEmpaquetado();
                JPanel container2 = SG.interfaz.getJEmpaquetadoContenedor();
                SG.interfaz.AddMaterias(SG.nEmpaquetado, jParent2, container2, Color.MAGENTA);
                
                        
                        SG.interfaz.ActualizarDatos();
                        SG.interfaz.EmpaquetadoASalida();
                        break;
                        
                        
                        
                }else if(n==4){
                    tope=false;
                    SG.nEmpaquetado-=1;        
                        SG.nSalida+=1;
                
                
                    System.out.println(SG.nEmpaquetado);
                Interfaz.MostrarMessage();                
                
                //se elimina la anterior pelota
                
                JPanel jParent = SG.interfaz.getJpanelEmpaquetado();
                JPanel container = SG.interfaz.getJEmpaquetadoContenedor();
                SG.interfaz.AddMaterias(SG.nEmpaquetado, jParent, container, Color.MAGENTA);
                
                
                    
                while (y <= getHeight() - 40) { 
                    Thread.sleep(90); // Velocidad con la que mueve el circulo
                    y += 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                 this.color = Color.WHITE;
                repaint();
                tope=true;
                        y=0;
                        
                
                //Se crea la nueva pelota
                JPanel jParent2 = SG.interfaz.getJSalida();
                JPanel container2 = SG.interfaz.getJSalidaContenendor();
                SG.interfaz.AddMaterias(SG.nSalida, jParent2, container2, Color.PINK);
                
                SG.interfaz.ActualizarDatos();
                SG.interfaz.SalidaAFinal();
                break;
                
                
                
                
                
                }else if(n==5){
                    tope=false;
                    
                    SG.nFinal+=1;        
                        SG.nSalida-=1;
                
                
                    System.out.println(SG.nSalida);
                Interfaz.MostrarMessage();                
                
                //se elimina la anterior pelota
                
                JPanel jParent = SG.interfaz.getJSalida();
                JPanel container = SG.interfaz.getJSalidaContenendor();
                SG.interfaz.AddMaterias(SG.nSalida, jParent, container, Color.PINK);
                
                    
                    while (y > 10) {
                    Thread.sleep(100); // Velocidad con la que mueve el circulo
                    y -= 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                
                
           while (x >= 10) { // Mover hacia la izquierda
            Thread.sleep(90);
            x -= 10;
            repaint();
            }
                this.color = Color.WHITE;
                repaint();
                tope=true;
                  x= getWidth()-30;
                  y=getHeight()-30;
           
                         
                
           SG.interfaz.ActualizarDatos();
                break;
                }
                
                else{
                
                
                /*
                    Verificacion de que el circulo llego al tope de en
                    dirrecion horizontal hacia la derecha
                */
                /*  
                    Se resta el tamaÃ±o de la ancho con 40
                    porque el circulo tiene 30 de ancho
                */
                while (x <= getWidth() - 40) {
                    
                    Thread.sleep(100); // Velocidad con la que mueve el circulo
                    x += 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }

                this.color = Color.RED;
                
                /*
                    Verificacion de que el circulo llego al tope de en
                    dirrecion vertical hacia abajo
                */
                
                /*  
                    Se resta el tamaÃ±o de la altura con 40
                    porque el circulo tiene 30 de altura
                */
                while (y <= getHeight() - 40) { 
                    Thread.sleep(100); // Velocidad con la que mueve el circulo
                    y += 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                this.color = Color.GREEN;
                
                /*
                    Verificacion de que el circulo llego al tope de en
                    dirrecion horizontal hacia la izquierda
                */
                while (x > 10) {
                    Thread.sleep(100); // Velocidad con la que mueve el circulo
                    x -= 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                this.color = Color.BLUE;
                
                /*
                    Verificacion de que el circulo llego al tope de en
                    dirrecion horizontal hacia arriba
                */
                while (y > 10) {
                    Thread.sleep(100); // Velocidad con la que mueve el circulo
                    y -= 10;
                    repaint(); // Se llama al metodo para redibujar el circulo
                }
                
                this.color = Color.YELLOW;
                System.out.println(contador);
            }
            }

        } catch (Exception e) {
            System.out.println("Error " + e);
        }
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public boolean getTope() {
        return this.tope;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
